import telebot
import requests
import logging
from functools import wraps
from telebot import types
from cryptography.fernet import Fernet

bot_token = '7432096347:AAEdv_Of7JgHcDdIfPzBnEz2c_GhtugZTmY'
logging.basicConfig(level=logging.DEBUG)

API_URL = 'https://jasstme.pythonanywhere.com'
user_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot = telebot.TeleBot(bot_token)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_key():
    key = Fernet.generate_key()
    return key


# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã
def encrypt_mnemonic(mnemonic_phrase, key):
    cipher_suite = Fernet(key)
    encrypted_phrase = cipher_suite.encrypt(mnemonic_phrase.encode())
    return encrypted_phrase


# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã
def decrypt_mnemonic(encrypted_phrase, key):
    cipher_suite = Fernet(key)
    decrypted_phrase = cipher_suite.decrypt(encrypted_phrase).decode()
    return decrypted_phrase


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def requires_auth(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        if user_id not in user_data or 'encrypted_mnemonic' not in user_data[user_id]:
            bot.send_message(message.chat.id, '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∫–æ—à–µ–ª–µ–∫.')
            return
        return func(message, *args, **kwargs)

    return wrapper


def generate_markup(authenticated=False):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    if authenticated:
        buttons = [
            types.KeyboardButton('/mnemonic'),
            types.KeyboardButton('/address'),
            types.KeyboardButton('/get'),
            # types.KeyboardButton('/send'),
            types.KeyboardButton('/exit')
        ]
    else:
        buttons = [
            types.KeyboardButton('/create'),
            types.KeyboardButton('/login'),
            types.KeyboardButton('/help')
        ]
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=['start'])
def main(message):
    bot.send_message(
        message.chat.id,
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}, –≤ –ë–ª–æ–∫—á–µ–π–Ω –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ <a href="https://jasstme.pythonanywhere.com/">https://jasstme.pythonanywhere.com/</a>',
        parse_mode='HTML',
        reply_markup=generate_markup()
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫\n"
        "/login - –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫\n"
        "/get - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/address - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
        "/mnemonic - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É (–ø–∞—Ä–æ–ª—å)\n"
        # "/send - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/exit - –í—ã–π—Ç–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    bot.send_message(message.chat.id, help_text, reply_markup=generate_markup())


@bot.message_handler(commands=['exit'])
@requires_auth
def exit_wallet(message):
    user_id = message.from_user.id
    del user_data[user_id]
    bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.', reply_markup=generate_markup())


@bot.message_handler(commands=['create'])
def create_wallet(message):
    response = requests.post(f'{API_URL}/create_wallet')
    if response.status_code == 200:
        data = response.json()
        user_id = message.from_user.id
        key = generate_key()
        encrypted_mnemonic = encrypt_mnemonic(data["mnemonic_phrase"], key)
        user_data[user_id] = {
            'encrypted_mnemonic': encrypted_mnemonic,
            'address': data["address"],
            'key': key
        }
        message_text = (
            f'üîê <b>–í–∞—à –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω.</b>\n\n'
            f'üì¨ <b>–ê–¥—Ä–µ—Å:</b> <code>{data["address"]}</code>\n'
            f'‚û°Ô∏è <i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.</i>'
        )
        bot.send_message(message.chat.id, message_text, reply_markup=generate_markup(authenticated=True),
                         parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞.')


@bot.message_handler(commands=['login'])
def login_wallet(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É:')
    bot.register_next_step_handler(msg, process_login)


def process_login(message):
    mnemonic_phrase = message.text
    response = requests.post(f'{API_URL}/login_wallet', json={'mnemonic_phrase': mnemonic_phrase})
    if response.status_code == 200:
        data = response.json()
        user_id = message.from_user.id
        key = generate_key()
        encrypted_mnemonic = encrypt_mnemonic(mnemonic_phrase, key)
        user_data[user_id] = {
            'encrypted_mnemonic': encrypted_mnemonic,
            'address': data["address"],
            'key': key
        }
        message_text = (
            f'üì¨ <b>–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</b>\n'
            f'<code>{data["address"]}</code>\n'
            f'‚û°Ô∏è <i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.</i>'
        )
        bot.send_message(message.chat.id, message_text, reply_markup=generate_markup(authenticated=True),
                         parse_mode='HTML')
    else:
        bot.send_message(message.chat.id,
                         f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ—à–µ–ª–µ–∫: {response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}')


@bot.message_handler(commands=['mnemonic'])
@requires_auth
def view_phrase(message):
    user_id = message.from_user.id
    key = user_data[user_id]['key']
    decrypted_phrase = decrypt_mnemonic(user_data[user_id]['encrypted_mnemonic'], key)
    message_text = (
        f'üóùÔ∏è <b>–í–∞—à–∞ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ (–ø–∞—Ä–æ–ª—å):</b>\n'
        f'<code>{decrypted_phrase}</code>\n'
        f'‚û°Ô∏è <i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ.</i>'
    )
    bot.send_message(message.chat.id, message_text, parse_mode='HTML', reply_markup=generate_markup(authenticated=True))


@bot.message_handler(commands=['address'])
@requires_auth
def view_address(message):
    user_id = message.from_user.id
    message_text = (
        f'üì¨ <b>–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</b>\n'
        f'<code>{user_data[user_id]["address"]}</code>\n'
        f'‚û°Ô∏è <i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.</i>'
    )
    bot.send_message(message.chat.id, message_text, parse_mode='HTML', reply_markup=generate_markup(authenticated=True))


@bot.message_handler(commands=['get'])
@requires_auth
def get_messages(message):
    user_id = message.from_user.id
    key = user_data[user_id]['key']
    decrypted_phrase = decrypt_mnemonic(user_data[user_id]['encrypted_mnemonic'], key)
    bot.send_message(message.chat.id, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...')
    try:
        response = requests.post(f'{API_URL}/get_messages',
                                 json={'mnemonic_phrase': decrypted_phrase})
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            messages = response.json()["messages"]
            if messages:
                bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}',
                                 reply_markup=generate_markup(authenticated=True))
                bot.send_message(message.chat.id,
                                 f'{message.from_user.first_name}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: <a href="https://jasstme.pythonanywhere.com/">https://jasstme.pythonanywhere.com/</a>',
                                 parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.",
                                 reply_markup=generate_markup(authenticated=True))
        else:
            bot.send_message(message.chat.id,
                             f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}',
                             reply_markup=generate_markup(authenticated=True))
    except requests.exceptions.RequestException as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}',
                         reply_markup=generate_markup(authenticated=True))
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}',
                         reply_markup=generate_markup(authenticated=True))


@bot.message_handler(commands=['send'])
@requires_auth
def send_message(message):
    bot.send_message(
        message.chat.id,
        f'{message.from_user.first_name}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ <a href="https://jasstme.pythonanywhere.com/">https://jasstme.pythonanywhere.com/</a> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π  ',
        parse_mode='HTML',
        reply_markup=generate_markup(authenticated=True)
    )


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                     reply_markup=generate_markup())


if __name__ == '__main__':
    bot.polling(none_stop=True)
